const { Telegraf, Markup, Scenes, session } = require('telegraf')
require('dotenv').config()
const sqlite3 = require('sqlite3').verbose()
process.noDeprecation = true

const bot = new Telegraf(process.env.BOT_TOKEN)
const db = new sqlite3.Database('./chats.db')

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
db.serialize(() => {
	db.run(`
        CREATE TABLE IF NOT EXISTS scene_state (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id TEXT NOT NULL,
            message_id TEXT NOT NULL
        )
    `)

	db.run(`
        CREATE TABLE IF NOT EXISTS chats (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            sender_chat_id TEXT NOT NULL,
            receiver_chat_id TEXT NOT NULL,
            message_id TEXT NOT NULL,
            UNIQUE(sender_chat_id, receiver_chat_id, message_id) -- –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
        )
    `)
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
const insertChat = (sender_chat_id, receiver_chat_id, message_id) => {
	return new Promise((resolve, reject) => {
		db.run(
			`INSERT INTO chats (sender_chat_id, receiver_chat_id, message_id) VALUES (?, ?, ?)`,
			[sender_chat_id, receiver_chat_id, message_id],
			function (err) {
				if (err) {
					if (err.code === 'SQLITE_CONSTRAINT') {
						console.log('–ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—Å—Ç–∞–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.')
						resolve() // –ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
					} else {
						console.error(err.message)
						reject(err)
					}
				} else {
					console.log(`–ù–æ–≤—ã–π —á–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID ${this.lastID}`)
					resolve()
				}
			}
		)
	})
}
const newAnswerScene = new Scenes.BaseScene('newAnswerMessage')

newAnswerScene.enter(async ctx => {
	// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ chat_id –∏ message_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	db.get(
		`SELECT chat_id, message_id FROM scene_state ORDER BY id DESC LIMIT 1`,
		[],
		async (err, row) => {
			if (err) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message)
				await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ü–µ–Ω—ã.')
				return ctx.scene.leave()
			}

			ctx.scene.state.chat_id = row.chat_id
			ctx.scene.state.message_id = row.message_id

			console.log(
				`answerScene - chat_id: ${ctx.scene.state.chat_id}, message_id: ${ctx.scene.state.message_id}`
			)
			await ctx.reply('–û—Ç–ø—Ä–∞–≤—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:')
		}
	)
})

newAnswerScene.on('message', async ctx => {
	const { message_id, chat_id } = ctx.scene.state
	console.log(`answerScene - chat_id: ${chat_id}, message_id: ${message_id}`)

	if (!chat_id || !message_id) {
		await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.')
		return ctx.scene.leave()
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞ –∏–∑ –ë–î
	db.get(
		`SELECT * FROM chats WHERE message_id = ?`,
		[message_id],
		async (err, row) => {
			if (err) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message)
				await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
				return ctx.scene.leave()
			}

			const receiver_chat_id = row
				? String(row.sender_chat_id)
				: String(chat_id)
			const sender_chat_id = row
				? String(row.receiver_chat_id)
				: String(chat_id)
			const other_account_chat_id = row
				? String(row.sender_chat_id)
				: String(chat_id) // –ò—Å–ø–æ–ª—å–∑—É–µ–º sender_chat_id –∏–∑ –ë–î
			console.log(
				`receiver_chat_id: ${receiver_chat_id}, sender_chat_id: ${sender_chat_id}, other_account_chat_id: ${other_account_chat_id}`
			)

			try {
				const markup = Markup.inlineKeyboard([
					Markup.button.callback(
						'–û—Ç–≤–µ—Ç–∏—Ç—åüîÑ',
						`answer_${ctx.chat.id}_${message_id}`
					),
				])
				// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –ë–î
				await insertChat(sender_chat_id, sender_chat_id, ctx.message.message_id)
				await bot.telegram.copyMessage(
					sender_chat_id,
					ctx.chat.id,
					ctx.message.message_id,
					markup
				)

				await ctx.reply(
					row
						? '–í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.'
						: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.'
				)
			} catch (e) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', e.message)
				await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.')
			} finally {
				await ctx.scene.leave()
			}
			return ctx.scene.leave()
		}
	)
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
const removeButtons = async ctx => {
	try {
		await ctx.editMessageReplyMarkup({ inline_keyboard: [] })
	} catch (e) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫:', e.message)
	}
}
// –°—Ü–µ–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
const getMessageScene = new Scenes.BaseScene('getMessage')

getMessageScene.enter(async ctx => {
	const chat_id = ctx.message.text.split(' ')[1]?.trim()
	if (!chat_id) {
		await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.')
		return ctx.scene.leave()
	}
	ctx.scene.state.chat_id = chat_id
	await ctx.reply(
		'–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –µ–≥–æ <b>–∞–Ω–æ–Ω–∏–º–Ω–æ</b> –ø–æ–ª—É—á–∏—Ç —Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–µ–ª–∏–ª—Å—è —Å —Ç–æ–±–æ–π —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π:',
		{ parse_mode: 'HTML' }
	)
})

getMessageScene.on('message', async ctx => {
	const chat_id = ctx.scene.state.chat_id
	const message_id = ctx.message.message_id

	if (!chat_id) {
		await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.')
		return ctx.scene.leave()
	}

	try {
		const markup = Markup.inlineKeyboard([
			Markup.button.callback(
				'–û—Ç–≤–µ—Ç–∏—Ç—åüîÑ',
				`answer_${ctx.chat.id}_${message_id}`
			),
		])
		await bot.telegram.sendMessage(
			chat_id,
			'üí¨ –í–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:'
		)
		await bot.telegram.copyMessage(chat_id, ctx.chat.id, message_id, markup)
		// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞ –≤ –ë–î
		await insertChat(ctx.chat.id, chat_id, message_id)
	} catch (e) {
		console.error(e)
		await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.')
	} finally {
		await ctx.reply('–¢–≤–æ–µ <b>–∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.', {
			parse_mode: 'HTML',
		})
		const me = await bot.telegram.getMe()
		const messageText = `–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ç–µ–±–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–µ.\n\nüìå –í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>https://t.me/${me.username}?start=${ctx.from.id}</code>\n–ù–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É –∏ –æ–Ω–∞ —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è üëÜ`

		await bot.telegram.sendAnimation(
			ctx.chat.id,
			{ source: '123.mp4' },
			{ caption: messageText, parse_mode: 'HTML' }
		)
	}
})

// –°—Ü–µ–Ω–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
const answerScene = new Scenes.BaseScene('answerMessage')

answerScene.enter(async ctx => {
	// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ chat_id –∏ message_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	db.get(
		`SELECT chat_id, message_id FROM scene_state ORDER BY id DESC LIMIT 1`,
		[],
		async (err, row) => {
			if (err) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message)
				await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ü–µ–Ω—ã.')
				return ctx.scene.leave()
			}

			ctx.scene.state.chat_id = row.chat_id
			ctx.scene.state.message_id = row.message_id

			console.log(
				`answerScene - chat_id: ${ctx.scene.state.chat_id}, message_id: ${ctx.scene.state.message_id}`
			) // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			await ctx.reply('–û—Ç–ø—Ä–∞–≤—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:')
		}
	)
})

answerScene.on('message', async ctx => {
	const { message_id, chat_id } = ctx.scene.state
	console.log(`answerScene - chat_id: ${chat_id}, message_id: ${message_id}`) // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

	if (!chat_id || !message_id) {
		await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.')
		return ctx.scene.leave()
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞ –∏–∑ –ë–î
	db.get(
		`SELECT * FROM chats WHERE message_id = ?`,
		[message_id],
		async (err, row) => {
			if (err) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message)
				await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
				return ctx.scene.leave()
			}

			const receiver_chat_id = row ? row.sender_chat_id : chat_id
			console.log(`receiver_chat_id: ${receiver_chat_id}`) // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

			try {
				const markup = Markup.inlineKeyboard([
					Markup.button.callback(
						'–û—Ç–≤–µ—Ç–∏—Ç—åüîÑ',
						`backans${ctx.chat.id}_${message_id}`
					),
				])
				// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –ë–î
				await insertChat(ctx.chat.id, receiver_chat_id, ctx.message.message_id)
				await bot.telegram.copyMessage(
					receiver_chat_id,
					ctx.chat.id,
					ctx.message.message_id,
					markup
				)

				await ctx.reply(
					row
						? '–í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.'
						: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.'
				)
			} catch (e) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', e.message)
				await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.')
			} finally {
				await ctx.scene.leave()
			}
		}
	)
})

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ü–µ–Ω –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
const stage = new Scenes.Stage([getMessageScene, answerScene, newAnswerScene])
bot.use(session())
bot.use(stage.middleware())

bot.start(async ctx => {
	const chat_id = ctx.message.text.split(' ')[1]?.trim()
	console.log(`chat_id: ${chat_id}`)
	const me = await bot.telegram.getMe()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Å–≤–æ–µ–π –∂–µ —Å—Å—ã–ª–∫–µ
	if (chat_id && chat_id == ctx.from.id) {
		const selfMessage = `ü§¶‚Äç‚ôÄÔ∏è –ü–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ - –≥–ª—É–ø–æ.\n\n–õ—É—á—à–µ —Ä–∞–∑–º–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –≤ —Å—Ç–æ—Ä–∏–∑ –∏–ª–∏ —É —Å–µ–±—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ Instagram/Telegram/VK/TikTok, –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∑–∞—Å—Ç–∞–≤—è—Ç —Å–µ–±—è –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å üòâ`
		await ctx.reply(selfMessage)
		return
	}

	if (!chat_id) {
		const messageText = `–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ç–µ–±–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–µ.\n\nüìå –í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>https://t.me/${me.username}?start=${ctx.from.id}</code>\n\n–ù–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É –∏ –æ–Ω–∞ —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è üëÜ`

		// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –∫–∞–∫ GIF –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º
		await bot.telegram.sendAnimation(
			ctx.chat.id,
			{ source: '123.mp4' },
			{ caption: messageText, parse_mode: 'HTML' }
		)

		return
	}

	ctx.scene.state.chat_id = chat_id
	await ctx.scene.enter('getMessage')
})

bot.help(async ctx => {
	const me = await bot.telegram.getMe()
	await ctx.reply(
		`–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å <b>–∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>.\n\n–í–æ—Ç –≤–∞—à–∞ –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>t.me/${me.username}?start=${ctx.chat.id}</code>\n–ü–æ–¥–µ–ª–∏—Å—å –µ—é, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ <b>–∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>.`,
		{ parse_mode: 'HTML' }
	)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.action(/answer_(.+)_(.+)/, async ctx => {
	const [_, chat_id, message_id] = ctx.match
	console.log(`bot.action - chat_id: ${chat_id}, message_id: ${message_id}`) // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ chat_id –∏ message_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	db.run(
		`INSERT INTO scene_state (chat_id, message_id) VALUES (?, ?)`,
		[chat_id, message_id],
		function (err) {
			if (err) {
				console.error(err.message)
			} else {
				console.log(`–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ü–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å ID ${this.lastID}`)
			}
		}
	)

	await ctx.scene.enter('answerMessage')
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.action(/backans(.+)_(.+)/, async ctx => {
	const [_, chat_id, message_id] = ctx.match
	console.log(`bot.action - chat_id: ${chat_id}, message_id: ${message_id}`)

	// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ sender_chat_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	db.get(
		`SELECT sender_chat_id FROM chats WHERE receiver_chat_id = ? AND message_id = ?`,
		[chat_id, message_id],
		(err, row) => {
			if (err) {
				console.error(err.message)
				return
			}

			if (!row) {
				console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º receiver_chat_id.')
				return
			}

			const sender_chat_id = row.sender_chat_id

			// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ sender_chat_id –∏ message_id –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
			db.run(
				`INSERT INTO scene_state (chat_id, message_id) VALUES (?, ?)`,
				[sender_chat_id, message_id],
				function (err) {
					if (err) {
						console.error(err.message)
					} else {
						console.log(`–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ü–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å ID ${this.lastID}`)
					}
				}
			)
		}
	)

	await ctx.scene.enter('newAnswerMessage')
	await removeButtons(ctx)
	// –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
})

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
